##Create Security Group

resource "aws_security_group" "ec2-sg" {
    vpc_id = "${aws_vpc.emerald-labs.id}"
    
    egress {
        from_port = 0
        to_port = 0
        protocol = -1
        cidr_blocks = ["0.0.0.0/0"]
    }
    ingress {
        from_port = 22
        to_port = 22
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    
    ingress {
        from_port = 80
        to_port = 80
        protocol = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
    }
    tags {
        Name = "ec2-sg"
    }
}

##Create ec2 

resource "aws_instance" "web1" {
    ami = "${lookup(var.AMI, var.AWS_REGION)}"
    instance_type = "t2.micro"
    # VPC
    subnet_id = "${aws_subnet.emerald-labs-private.id}"
    # Security Group
    vpc_security_group_ids = ["${aws_security_group.ec2-sg.id}"]
    # the Public SSH key
    key_name = "${aws_key_pair.key-pair-web1.id}"


##Create ELB

resource "aws_elb" "elb" {
  name               = "emerald-labs-elb"
  availability_zones = ["eu-west-1a", "eu-west-1b"]
  listener {
    instance_port     = 8000
    instance_protocol = "http"
    lb_port           = 80
    lb_protocol       = "http"
  }
  health_check {
    healthy_threshold   = 2
    unhealthy_threshold = 2
    timeout             = 3
    target              = "HTTP:8000/"
    interval            = 30
  }
  instances                   = [aws_instance.ec2.id]
  cross_zone_load_balancing   = true
  idle_timeout                = 400
  connection_draining         = true
  connection_draining_timeout = 400
  tags = {
    Name = "terraform-elb"
  }
}



